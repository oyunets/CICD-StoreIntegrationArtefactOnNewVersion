import jenkins.model.Jenkins
import hudson.model.Node
import hudson.slaves.EnvironmentVariablesNodeProperty
import hudson.EnvVars

def artifactIds = []

pipeline {
    agent any

    //Configure the following environment variables before executing the Jenkins Job
    environment {
        IntegrationPackageID = "EPAM"
        CPIHost = 'f4c7d2e5trial.it-cpitrial06.cfapps.us10-001.hana.ondemand.com'
        CPIOAuthHost = 'f4c7d2e5trial.authentication.us10.hana.ondemand.com/oauth/token'
        CPIOAuthCredentials = 'ci-api'
        GITRepositoryURL = 'github.com/oyunets/books'
        GITCredentials = 'git'
        GITBranch = 'main'
        GITComment = "Integration Artefacts update from CI/CD pipeline"
        GITFolder = "IntegrationContent/IntegrationArtefacts/${IntegrationPackageID}"
    }

//    parameters {
//        string(name: 'IntegrationPackageID', defaultValue: 'IntegrationPackageID', description: 'Integration Package ID')
//    }

    stages {
        stage('Initialization') {
            steps {
                script {
                    def value = 'NODE_NAME'
                    def node_name = "${" + value + "}"
                    echo node_name
                    //clean up workspace first
                    echo 'Initialize pipeline'
                    deleteDir()
                }
            }
        }

        stage('Get List of Integration Designtime Artifacts') {
            steps {
                script {
                    //get Cloud Integration Oauth token
                    def cpiTokenResponse = httpRequest acceptType: 'APPLICATION_JSON',
                            authentication: env.CPIOAuthCredentials,
                            ignoreSslErrors: false,
                            responseHandle: 'LEAVE_OPEN',
                            timeout: 30,
                            url: 'https://' + env.CPIOAuthHost + '/oauth/token?grant_type=client_credentials'
                    def jsonObj = readJSON text: cpiTokenResponse.content
                    def cpiToken = 'bearer' + ' ' + jsonObj.access_token
                    cpiTokenResponse.close()

                    //download and extract list of integration flowsfrom Cloud Integration tenant
                    println("Download artefact")
                    def cpiPackageResponse = httpRequest acceptType: 'APPLICATION_JSON',
                            customHeaders: [[maskValue: true, name: 'Authorization', value: cpiToken]],
                            ignoreSslErrors: false,
                            responseHandle: 'LEAVE_OPEN',
                            timeout: 30,
                            url: 'https://' + env.CPIHost + '/api/v1/IntegrationPackages(Id=\'' + env.IntegrationPackageID + '\')/IntegrationDesigntimeArtifacts'
                    def jsonObj2 = readJSON text: cpiPackageResponse.content
                    jsonObj2.d.results.each { artefact ->
                        artifactIds.push(artefact)
                        println(artefact)
                    }
                    cpiPackageResponse.close()
                }
            }
        }

        stage('Process iFlows ') {
            steps {
                script {
                    artifactIds.each { artefact ->
                        try {
                            echo 'Start job with IntegrationFlowID = ' + artefact.Id
                            build job: 'iFlow', wait: true, parameters: [
                                    string(name: 'IntegrationPackageID', value: IntegrationPackageID),
                                    string(name: 'IntegrationFlowID', value: artefact.Id),
                                    string(name: 'CPIHost', value: CPIHost),
                                    string(name: 'CPIOAuthHost', value: CPIOAuthHost),
                                    string(name: 'CPIOAuthCredentials', value: CPIOAuthCredentials),
                                    string(name: 'GITRepositoryURL', value: GITRepositoryURL),
                                    string(name: 'GITCredentials', value: GITCredentials),
                                    string(name: 'GITBranch', value: GITBranch),
                                    string(name: 'GITComment', value: GITComment),
                                    string(name: 'GITFolder', value: GITFolder),
                                    string(name: 'CreatetedBy', value: artefact.CreatetedBy),
                                    string(name: 'ModifiedBy', value: artefact.ModifiedBy)
                            ]
                        }
                        catch (err) {
                            echo err.getMessage()
                        }
                    }
                }
            }
        }

        stage('Cleanup') {
            steps {
                script {
                    //clean up workspace
                    echo 'Clean pipeline'
                    deleteDir()
                }
            }
        }
    }
}